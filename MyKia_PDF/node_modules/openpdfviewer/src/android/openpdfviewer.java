package cordova.plugin.openpdfviewer;

import android.Manifest;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.content.res.AssetManager;
import android.net.Uri;
import android.os.Environment;
import android.util.Log;
import android.widget.Toast;

import org.apache.cordova.CordovaPlugin;
import org.apache.cordova.CallbackContext;

import org.apache.cordova.PermissionHelper;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

/**
 * This class echoes a string called from JavaScript.
 */
public class openpdfviewer extends CordovaPlugin {

    private static String TAG = openpdfviewer.class.getSimpleName();
    private CallbackContext callbackContext;
    private String params;
    public static final int SAVE_TO_FILE_SEC = 1;

    @Override
    public boolean execute(String action, JSONArray args, CallbackContext callbackContext) throws JSONException {
        this.callbackContext = callbackContext;
        this.params = args.getString(0);
        if (action.equals("getFile")) {
            try {
                if (!PermissionHelper.hasPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE)) {
                    PermissionHelper.requestPermission(this, SAVE_TO_FILE_SEC, Manifest.permission.READ_EXTERNAL_STORAGE);
                } else {
                    getFile(params);
                }
            } catch (Exception e) {
                Log.e("PDF INTENT ", "Exception");
                JSONObject errorObj = new JSONObject();
                errorObj.put("status", e.getMessage());
                errorObj.put("message", "Activity not found: " + e.getMessage());
                callbackContext.error(errorObj);
                e.printStackTrace();
            }
            return true;
        }
        return false;
    }

    public void getFile(String fileName) {
        fileName = fileName.endsWith("pdf") ? fileName : fileName + ".pdf";
        String rootPath = Environment.getExternalStorageDirectory()
                .getAbsolutePath() + "/OpenPDFViewer/" + fileName;
        File root = new File(rootPath);
        if (!root.exists()) {
            root.mkdirs();
        }
        File file = new File(rootPath);

        AssetManager assetManager = this.cordova.getActivity().getAssets();

        InputStream in = null;
        OutputStream out = null;
        try {
            if (file.exists()) {
                file.delete();
            }
            file.createNewFile();
            in = assetManager.open("www/" + fileName);
            Log.d(TAG, "In");

            out = new FileOutputStream(file);
            Log.d(TAG, "Out");

            Log.d(TAG, "Copy file");
            copyFile(in, out);

            Log.d(TAG, "Close");
            in.close();

            out.flush();
            out.close();

            Intent intent = new Intent(Intent.ACTION_VIEW);
            intent.setDataAndType(
                    Uri.fromFile(file),
                    "application/pdf");
            intent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
            this.cordova.getActivity().startActivity(intent);
            callbackContext.success();
        } catch (Exception e) {
            Log.e(TAG, e.getMessage());
            try {
                JSONObject errorObj = new JSONObject();
                errorObj.put("status", e.getMessage());
                errorObj.put("message", "Activity not found: " + e.getMessage());
                callbackContext.error(errorObj);
            } catch (JSONException error) {
                error.printStackTrace();
            }
            Toast.makeText(this.cordova.getActivity(), "No Application to view the Pdf file", Toast.LENGTH_SHORT).show();
        }
    }

    private void copyFile(InputStream in, OutputStream out) throws IOException {
        byte[] buffer = new byte[1024];
        int read;
        while ((read = in.read(buffer)) != -1) {
            out.write(buffer, 0, read);
        }
    }

    public void onRequestPermissionResult(int requestCode, String[] permissions,
                                          int[] grantResults) throws JSONException {
        switch (requestCode) {
            case SAVE_TO_FILE_SEC:
                if (grantResults.length == 1 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                    try {
                        getFile(params);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                } else {
                    this.callbackContext.error("Permission Not Granted");
                }
                break;
        }
    }
}